<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ahsj.hiscore.dao.HisTollDetailsMapper">
    <resultMap id="BaseResultMap" type="com.ahsj.hiscore.entity.HisTollDetails">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="create_user_id" property="createUserId" jdbcType="BIGINT"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="update_user_id" property="updateUserId" jdbcType="BIGINT"/>
        <result column="update_date" property="updateDate" jdbcType="TIMESTAMP"/>
        <result column="toll_record_id" property="tollRecordId" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="records" property="records" jdbcType="VARCHAR"/>
        <result column="target_id" property="targetId" jdbcType="BIGINT"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="money" property="money" jdbcType="DECIMAL"/>
        <result column="price" property="price" jdbcType="DECIMAL"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="num" property="num" jdbcType="INTEGER"/>
        <result column="isPay" property="isPay" jdbcType="INTEGER"/>
        <result column="is_settlement" property="isSettlement" jdbcType="INTEGER"/>
        <!--添加字段-->
        <result column="user_name" property="createName"/>
        <result column="totalPrices" property="total_prices"/>
        <result column="recover_the_fee" property="recoverTheFee"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, create_user_id, create_date, update_user_id, update_date, toll_record_id, name,
        records, target_id, type, money, description,is_settlement
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from his_toll_details
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from his_toll_details
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.ahsj.hiscore.entity.HisTollDetails">
        insert into his_toll_details (id, create_user_id, create_date,
                                      update_user_id, update_date, toll_record_id,
                                      name, records, target_id,
                                      type, money, description,is_settlement
        )
        values (#{id,jdbcType=BIGINT}, #{createUserId,jdbcType=BIGINT}, #{createDate,jdbcType=TIMESTAMP},
                #{updateUserId,jdbcType=BIGINT}, #{updateDate,jdbcType=TIMESTAMP}, #{tollRecordId,jdbcType=BIGINT},
                #{name,jdbcType=VARCHAR}, #{records,jdbcType=VARCHAR}, #{targetId,jdbcType=BIGINT},
                #{type,jdbcType=INTEGER}, #{money,jdbcType=DECIMAL}, #{description,jdbcType=VARCHAR},#{isSettlement,jdbcType=INTEGER}
               )
    </insert>
    <insert id="insertSelective" parameterType="com.ahsj.hiscore.entity.HisTollDetails">
        insert into his_toll_details
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="createUserId != null">
                create_user_id,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateUserId != null">
                update_user_id,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="tollRecordId != null">
                toll_record_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="records != null">
                records,
            </if>
            <if test="targetId != null">
                target_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="money != null">
                money,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="isSettlement != null">
                is_settlement,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="createUserId != null">
                #{createUserId,jdbcType=BIGINT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUserId != null">
                #{updateUserId,jdbcType=BIGINT},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="tollRecordId != null">
                #{tollRecordId,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="records != null">
                #{records,jdbcType=VARCHAR},
            </if>
            <if test="targetId != null">
                #{targetId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="money != null">
                #{money,jdbcType=DECIMAL},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="isSettlement != null">
                #{isSettlement,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.ahsj.hiscore.entity.HisTollDetails">
        update his_toll_details
        <set>
            <if test="createUserId != null">
                create_user_id = #{createUserId,jdbcType=BIGINT},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUserId != null">
                update_user_id = #{updateUserId,jdbcType=BIGINT},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="tollRecordId != null">
                toll_record_id = #{tollRecordId,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="records != null">
                records = #{records,jdbcType=VARCHAR},
            </if>
            <if test="targetId != null">
                target_id = #{targetId,jdbcType=BIGINT},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="money != null">
                money = #{money,jdbcType=DECIMAL},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="isSettlement != null">
                is_settlement = #{isSettlement,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ahsj.hiscore.entity.HisTollDetails">
        update his_toll_details
        set create_user_id = #{createUserId,jdbcType=BIGINT},
            create_date = #{createDate,jdbcType=TIMESTAMP},
            update_user_id = #{updateUserId,jdbcType=BIGINT},
            update_date = #{updateDate,jdbcType=TIMESTAMP},
            toll_record_id = #{tollRecordId,jdbcType=BIGINT},
            name = #{name,jdbcType=VARCHAR},
            records = #{records,jdbcType=VARCHAR},
            target_id = #{targetId,jdbcType=BIGINT},
            type = #{type,jdbcType=INTEGER},
            money = #{money,jdbcType=DECIMAL},
            description = #{description,jdbcType=VARCHAR},
            is_settlement = #{isSettlement,jdbcType=INTEGER}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <!--  自定义sql-->
    <select id="listByMecordIdForHospital" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        select
            a.target_id as target_id,
            a.num as num,
            a.money as price ,
            a.name as name,
            a.isPay as isPay,
            a.type as type,
            a.money * a.num as money
        from(
                select
                    a.name as name,
                    b.id as target_id,
                    b.price as money,
                    b.is_payed as isPay,
                    b.num as num,
                    2 as type
                from
                    his_project as a
                        left join
                        his_record_project as b on b.project_id = a.id
                        left join
                        his_medical_record as c on b.record_id = c.id
                where c.medical_record_id = #{parameter.MedicalRecordId,jdbcType=VARCHAR}

                UNION ALL

                select
                    d.drugs_name as name,
                    e.id as target_id,
                    d.sale_price as money,
                    e.is_pay as isPay,
                    e.count as num,
                    1 as type
                from
                    his_pharmacy_detail as d
                        left join
                        his_medication_details as e on e. medication_id = d.id
                        left join
                        his_medical_record as f on e.medical_record_id = f.id
                where f.medical_record_id = #{parameter.MedicalRecordId,jdbcType=VARCHAR}

                UNION ALL

                select
                    b.name as name,
                    a.id as target_id,
                    b.money as money ,
                    2 as isPay,
                    a.hospitalization_day - b.pay_days as num,
                    3 as type
                from
                    his_hospital_manage as a
                        left join
                        (select a.id ,SUM(a.num) as pay_days,
                                a.money as money,
                                a.name
                         from
                             (
                                 select
                                     g.id ,
                                     CONCAT("住院",h.number,"号病床费用") as name,
                                     h.price as money,
                                     substring_index(substring_index(g.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
                                     substring_index(substring_index(g.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id
                                 from
                                     his_bed as h
                                         left join his_hospital_manage as g on h.id = g.bed_id
                                         left join his_medical_record as f on g.medical_number = f.id
                                         join
                                         mysql.help_topic b
                                         on b.help_topic_id &lt; (length(g.pay_hospitalization_day) -
                                                                  length(replace(g.pay_hospitalization_day,',',''))+1)
                                 order by g.id
                             ) as a
                         GROUP BY a.id) as b on a.id = b.id
                where a.medical_number = #{parameter.MedicalRecordId,jdbcType=VARCHAR}

                UNION ALL

                select
                    k.name as name,
                    k.target_id as target_id,
                    k.money as money ,
                    k.isPay as isPay,
                    k.num as num,
                    k.type as type
                from(
                        select
                            CONCAT("住院",h.number,"号病床费用") as name,
                            h.price as money,
                            substring_index(substring_index(z.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
                            substring_index(substring_index(z.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id,
                            1 as isPay,
                            3 as type
                        from
                            his_bed as h
                                left join his_hospital_manage as z on h.id = z.bed_id
                                left join his_medical_record as f on z.medical_number = f.id
                                join
                                mysql.help_topic b
                                on b.help_topic_id &lt; (length(z.pay_hospitalization_day) -
                                                         length(replace(z.pay_hospitalization_day,',',''))+1)
                        where z.medical_number = #{parameter.MedicalRecordId,jdbcType=VARCHAR}
                        order by z.id ) as k
            ) a
        where a.num != 0
        order by a.isPay desc
    </select>

    <!--根据就诊记录查询出花费明细（花费的是项目或者药品）id 对应的是具体付费的id以及库中的target_id，项目中对应的是项目记录，药品对应的是用药明细,用于门诊付费-->
    <select id="listForOutpatientCharges" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        select a.*
        from(
        select
        c.medical_record_id ,
        b.name as name,
        a.id as id,
        a.price as price,
        a.is_payed as isPay,
        a.num as num ,
        a.price * a.num as money,
        2 as type
        from
        his_record_project as a
        left join
        his_project as b on a.project_id = b.id
        left join
        his_medical_record as c on a.record_id = c.id
        UNION ALL
        select
        f.medical_record_id,
        d.drugs_name as name,
        d.id as id,
        e.sale_price as price,
        d.is_pay as isPay,
        d.count as num,
        e.sale_price * d.count as money,
        1 as type
        from
        his_medication_details as d
        left join
        his_pharmacy_detail as e on d. medication_id = e.id
        left join
        his_medical_record as f on d.medical_record_id = f.id) a
        <if test="parameter.medicalRecordId != null and parameter.medicalRecordId != ''">
            and a.medical_record_id = #{parameter.medicalRecordId,jdbcType=VARCHAR}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>


    <insert id="saveForHospi" useGeneratedKeys="true" parameterType="java.util.List">
        <selectKey resultType="long" keyProperty="id" order="AFTER">
            SELECT
            LAST_INSERT_ID()
        </selectKey>

        insert into his_toll_details (id, create_user_id, create_date, update_user_id, update_date, toll_record_id,
        name,
        records, target_id, type, money, description, is_settlement)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=BIGINT}, #{item.createUserId,jdbcType=BIGINT}, #{item.createDate,jdbcType=TIMESTAMP},
            #{item.updateUserId,jdbcType=BIGINT}, #{item.updateDate,jdbcType=TIMESTAMP},
            #{item.tollRecordId,jdbcType=BIGINT},
            #{item.name,jdbcType=VARCHAR}, #{item.records,jdbcType=VARCHAR}, #{item.targetId,jdbcType=BIGINT},
            #{item.type,jdbcType=INTEGER}, #{item.money,jdbcType=DECIMAL},
            #{item.description,jdbcType=VARCHAR},#{item.isSettlement,jdbcType=INTEGER}
            )
        </foreach>
    </insert>

    <select id="listByMecordIdForSave" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        select
        a.target_id as target_id,
        a.num as num,
        a.money as price ,
        a.name as name,
        a.isPay as isPay,
        a.type as type,
        a.money * a.num as money
        from(
        select
        a.name as name,
        b.id as target_id,
        b.price as money,
        b.is_payed as isPay,
        b.num as num,
        2 as type
        from
        his_project as a
        left join
        his_record_project as b on b.project_id = a.id
        left join
        his_medical_record as c on b.record_id = c.id
        where c.medical_record_id = #{parameter.MedicalRecordId,jdbcType=VARCHAR}
        UNION ALL
        select
        d.drugs_name as name,
        e.id as target_id,
        d.sale_price as money,
        e.is_pay as isPay,
        e.count as num,
        1 as type
        from
        his_pharmacy_detail as d
        left join
        his_medication_details as e on e. medication_id = d.id
        left join
        his_medical_record as f on e.medical_record_id = f.id
        where f.medical_record_id = #{parameter.MedicalRecordId,jdbcType=VARCHAR}
        UNION ALL

        select
        b.name as name,
        a.id as target_id,
        b.money as money ,
        2 as isPay,
        a.hospitalization_day - b.pay_days as num,
        3 as type
        from
        his_hospital_manage as a
        left join
        (select a.id ,SUM(a.num) as pay_days,
        a.money as money,
        a.name
        from
        (
        select
        g.id ,
        h.number as name,
        h.price as money,
        substring_index(substring_index(g.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
        substring_index(substring_index(g.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id
        from
        his_bed as h
        left join his_hospital_manage as g on h.id = g.bed_id
        left join his_medical_record as f on g.medical_number = f.id
        join
        mysql.help_topic b
        on b.help_topic_id &lt; (length(g.pay_hospitalization_day) -
        length(replace(g.pay_hospitalization_day,',',''))+1)
        order by g.id
        ) as a
        GROUP BY a.id) as b on a.id = b.id
        where a.medical_number = #{parameter.MedicalRecordId,jdbcType=VARCHAR}
        UNION ALL
        select
        k.name as name,
        k.target_id as target_id,
        k.money as money ,
        k.isPay as isPay,
        k.num as num,
        k.type as type

        from(
        select
        h.number as name,
        h.price as money,
        substring_index(substring_index(z.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
        substring_index(substring_index(z.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id,
        1 as isPay,
        3 as type
        from
        his_bed as h
        left join his_hospital_manage as z on h.id = z.bed_id
        left join his_medical_record as f on z.medical_number = f.id
        join
        mysql.help_topic b
        on b.help_topic_id &lt; (length(z.pay_hospitalization_day) -
        length(replace(z.pay_hospitalization_day,',',''))+1)
        order by z.id ) as k
        ) a
        where
        a.num != 0
        and
        a.isPay = 2
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>
    <!--查看就诊编号对应的用药明细-->
    <select id="listForOutpatientByMecordId" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        select  a.*
        from(
                select
                    c.medical_record_id ,
                    b.name as name,
                    a.id as target_id,
                    a.price   as price,
                    a.is_payed as isPay,
                    a.num as num ,
                    a.price * a.num as money,
                    2 as type
                from
                    his_record_project as a
                        left join
                        his_project as b on a.project_id = b.id
                        left join
                        his_medical_record as  c on a.record_id = c.id
                        left join
                        his_registered as d on c.registered_id = d.id
                where  d.number = #{parameter.registerNumber,jdbcType=VARCHAR}
                UNION ALL
                select
                    f.medical_record_id,
                    d.drugs_name as name,
                    d.id as target_id,
                    e.sale_price  as price,
                    d.is_pay as isPay,
                    d.count as num,
                    e.sale_price * d.count as money,
                    1 as type
                from
                    his_medication_details as d
                        left join
                        his_pharmacy_detail as e on d. medication_id = e.id
                        left join
                        his_medical_record as  f on d.medical_record_id = f.id
                        left join his_registered as g on f.registered_id = g.id
                where  g.number = #{parameter.registerNumber,jdbcType=VARCHAR}) a
        where a.num != 0
    </select>
    <!--查看就诊编号对应的用药明细，仅查看未付费的-->
    <select id="listByMecordIdForOutpatientSave" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        select  a.*
        from(
                select
                    c.medical_record_id ,
                    b.name as name,
                    a.id as target_id,
                    a.price   as price,
                    a.is_payed as isPay,
                    a.num as num ,
                    a.price * a.num as money,
                    2 as type
                from
                    his_record_project as a
                        left join
                        his_project as b on a.project_id = b.id
                        left join
                        his_medical_record as  c on a.record_id = c.id
                        left join
                        his_registered as d on c.registered_id = d.id
                where  d.number = #{parameter.registerNumber,jdbcType=VARCHAR} or c.medical_record_id =#{parameter.MedicalReocordNumber,jdbcType=VARCHAR}
                UNION ALL
                select
                    f.medical_record_id,
                    d.drugs_name as name,
                    d.id as target_id,
                    e.sale_price  as price,
                    d.is_pay as isPay,
                    d.count as num,
                    e.sale_price * d.count as money,
                    1 as type
                from
                    his_medication_details as d
                        left join
                        his_pharmacy_detail as e on d. medication_id = e.id
                        left join
                        his_medical_record as  f on d.medical_record_id = f.id
                        left join his_registered as g on f.registered_id = g.id
                where  g.number = #{parameter.registerNumber,jdbcType=VARCHAR} or f.medical_record_id =#{parameter.MedicalReocordNumber,jdbcType=VARCHAR}) a
        where a.num != 0 and a.isPay = 2
    </select>
    <select id="listHisTollDetails" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        SELECT
        i.user_name,d.type,
        abs(h.actual_charge-
        h.recover_the_fee)as total_prices ,
        d.create_date,
        case when
        d.type=1
        then
        (select m.count from his_medication_details as m where m.id =
        d.target_id)
        when
        d.type=2
        then
        (select h.num from his_record_project as h where h.id = d.target_id)
        when
        d.type=3
        then
        (select m.hospitalization_day from his_hospital_manage as m where m.id = d.target_id)
        when
        d.type=4
        then
        (select g.return_count from his_application_for_drug_return_details as g where g.id = d.target_id)
        end as num ,
        case when
        d.type=1
        then
        (select s.sale_price from his_pharmacy_detail as s where s.id =
        (select m.medication_id from his_medication_details as m where m.id =
        d.target_id)
        )
        when
        d.type=2
        then
        (
        select h.price from his_record_project as h where h.id = d.target_id
        )
        when
        d.type=3
        then
        (SELECT e.price from his_bed as e where e.number = d.name)
        when
        d.type =4
        then
        (select g.price from his_application_for_drug_return_details as g where g.id = d.target_id)
        end as price ,
        case
        when d.type=3
        then
        (select CONCAT("住院",h.name ,"号病床费用") from his_toll_details as h
        WHERE h.id=d.id)
        else d.name
        end as name,
        d.money
        FROM `his_toll_details` as d
        LEFT JOIN `his-userinfo`.user_info as i on i.id = d.create_user_id
        LEFT JOIN
        his_toll_record as h on h.id = d.toll_record_id
        where d.toll_record_id =(
        SELECT h.id
        from his_toll_record as h
        where
        1=1
        <if test="parameter.tollRecordId != null and parameter.tollRecordId != ''">
            and h.id =#{parameter.tollRecordId}
        </if>)
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>
    <select id="listByNumber" resultMap="BaseResultMap" parameterType="java.lang.String">
 SELECT
            h.recover_the_fee,
            i.user_name,d.type,
            abs(h.actual_charge-
                h.recover_the_fee)as total_prices ,
            d.create_date,d.target_id ,
            case
                when
                    d.type =4
                    then
                    (select m.id from  his_medicine_info as m  where  m.drugs_numb = (
                        select r.drugs_numb from  his_application_for_drug_return_details as r  where id = d.target_id))
                WHEN
                    d.type=1
                    then (select m.id from  his_medicine_info as m  where  m.drugs_numb = (
                    select d.drugs_numb from  his_medication_details as d  where d.id = d.target_id)
                )
                when
                    d.type=2
                    then
                    (select p.project_id from  his_record_project  as p  where   p.id = d.target_id )

										when
                    d.type=5
                    then
                    (
										select p.project_id from  his_record_project  as p  where   p.id = (
										select p.record_project_id from  his_refund_project  as p  where   p.id = d.target_id ))

                end as id
                ,
            case when
                     d.type=1
                     then
                     (select m.count from his_medication_details as m where m.id  =
                                                                            d.target_id)
                 when
                     d.type=2
                     then
                         (select h.num from  his_record_project as h where h.id = d.target_id)
                 when
                     d.type=3
                     then
                     (select m.hospitalization_day from his_hospital_manage as m where m.id = d.target_id)
                 when
                     d.type=4
                     then
                     (select g.return_count from his_application_for_drug_return_details as g where g.id = d.target_id)

										 when d.type = 5
										 then(
										 select p.refund_num from his_refund_project as p  where  p.id = d.target_id
										 )
                end  as num ,
            case when
                     d.type=1
                     then
                     (select s.sale_price  from his_pharmacy_detail as s where s.id =
                                                                               (select m.medication_id from his_medication_details as m where m.id  =
                                                                                                                                              d.target_id)
                     )
                 when
                     d.type=2
                     then
                     (
                         select h.price from  his_record_project as h where h.id = d.target_id
                     )
                 when
                     d.type=3
                     then
                         (SELECT e.price from  his_bed as e  where e.number = d.name)
                 when
                     d.type =4
                     then
                     (select g.price from his_application_for_drug_return_details as g where g.id = d.target_id)
										 when  d.type =5
										 then(
										 	select p.price from  his_record_project  as p  where   p.id = (
										select p.record_project_id from  his_refund_project  as p  where   p.id = d.target_id )
										 )

                end  as price ,
            d.name,
            d.money
        FROM `his_toll_details` as d
                 LEFT JOIN  `his-userinfo`.user_info as i  on   i.id = d.create_user_id
                 LEFT JOIN
                 his_toll_record as h on h.id = d.toll_record_id
        where  d.toll_record_id  =(
            SELECT h.id
            from his_toll_record as h where h.number=#{number}
        )
    </select>

    <select id="selectByNumber" resultMap="BaseResultMap" parameterType="java.lang.String">
        select r.* ,i.`name` ,i.idcard from  his_toll_record as r
                                                 LEFT JOIN his_visit_card as c on c.number = r.medical_record_id
                                                 LEFT JOIN his_patient_info as i  on i.id = c.patient_id
        where r.number  = #{number}
    </select>

    <select id="selectByTollNumberForBedAmount" parameterType="java.lang.String" resultMap="BaseResultMap">
        select a.*
        from his_toll_details as a
                 left join his_toll_record as b on a.toll_record_id = b.id
        where b.number =#{tollRecordNumber} and a.type = 3
    </select>

    <select id="listForcommonSwipeByCommonNumber" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        select
            a.target_id as target_id,
            a.num as num,
            a.money as price ,
            a.name as name,
            a.isPay as isPay,
            a.type as type,
            a.money * a.num as money
        from(
                select
                    d.name as name,
                    d.id as target_id,
                    d.price as money,
                    d.is_payed as isPay,
                    d.num as num,
                    2 as type
                from
                    his_medical_record as a
                        left join his_registered as b on a.registered_id = b.id
                        left join his_hospital_manage as c on a.medical_record_id = c.medical_number
                        left join his_record_project as d on d.record_id = a.id
                where a.medical_record_id =#{parameter.commonNumber,jdbcType=VARCHAR} or b.number =#{parameter.commonNumber,jdbcType=VARCHAR} or c.number=#{parameter.commonNumber,jdbcType=VARCHAR}

                UNION ALL

                select
                    d.drugs_name as name,
                    d.id as target_id,
                    e.sale_price as money,
                    d.is_pay as isPay,
                    d.count as num,
                    1 as type
                from
                    his_medical_record as a
                        left join his_registered as b on a.registered_id = b.id
                        left join his_hospital_manage as c on a.medical_record_id = c.medical_number
                        left join his_medication_details as d on d.medical_record_id = a.id
                        left join his_pharmacy_detail as e on d.drugs_numb = e.drugs_numb
                where a.medical_record_id =#{parameter.commonNumber,jdbcType=VARCHAR} or b.number =#{parameter.commonNumber,jdbcType=VARCHAR} or c.number=#{parameter.commonNumber,jdbcType=VARCHAR}

                UNION ALL

                select
                    b.name as name,
                    a.id as target_id,
                    b.money as money ,
                    2 as isPay,
                    a.hospitalization_day - b.pay_days as num,
                    3 as type
                from
                    his_medical_record as z
                        left join his_registered as y on z.registered_id = y.id
                        left join his_hospital_manage as a on a.medical_number = z.medical_record_id
                        left join
                        (select a.id ,SUM(a.num) as pay_days,
                                a.money as money,
                                a.name
                         from
                             (
                                 select
                                     g.id ,
                                     CONCAT("住院",h.number,"号病床费用") as name,
                                     h.price as money,
                                     substring_index(substring_index(g.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
                                     substring_index(substring_index(g.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id
                                 from
                                     his_bed as h
                                         left join his_hospital_manage as g on h.id = g.bed_id
                                         left join his_medical_record as f on g.medical_number = f.id
                                         join
                                         mysql.help_topic b
                                         on b.help_topic_id &lt; (length(g.pay_hospitalization_day) -
                                                                  length(replace(g.pay_hospitalization_day,',',''))+1)
                                 order by g.id
                             ) as a
                         GROUP BY a.id) as b on a.id = b.id
                where z.medical_record_id =#{parameter.commonNumber,jdbcType=VARCHAR} or y.number =#{parameter.commonNumber,jdbcType=VARCHAR} or a.number=#{parameter.commonNumber,jdbcType=VARCHAR}

                UNION ALL

                select
                    k.name as name,
                    k.target_id as target_id,
                    k.money as money ,
                    k.isPay as isPay,
                    k.num as num,
                    k.type as type
                from(
                        select
                            CONCAT("住院",h.number,"号病床费用") as name,
                            h.price as money,
                            substring_index(substring_index(z.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
                            substring_index(substring_index(z.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id,
                            1 as isPay,
                            3 as type
                        from
                            his_bed as h
                                left join his_hospital_manage as z on h.id = z.bed_id
                                left join his_medical_record as f on z.medical_number = f.medical_record_id
                                left join his_registered as y on y.id = f.registered_id
                                join
                                mysql.help_topic b
                                on b.help_topic_id &lt; (length(z.pay_hospitalization_day) -
                                                         length(replace(z.pay_hospitalization_day,',',''))+1)
                        where f.medical_record_id =#{parameter.commonNumber,jdbcType=VARCHAR} or y.number =#{parameter.commonNumber,jdbcType=VARCHAR} or z.number=#{parameter.commonNumber,jdbcType=VARCHAR}
                        order by z.id ) as k
            ) a
        where a.num != 0
        order by a.isPay desc
    </select>

    <select id="listByNumberLeave" resultMap="BaseResultMap" parameterType="java.lang.String">
 SELECT
            h.recover_the_fee,
            i.user_name,d.type,
            abs(h.actual_charge-
                h.recover_the_fee)as total_prices ,
            d.create_date,d.target_id ,
            case
                when
                    d.type =4
                    then
                    (select m.id from  his_medicine_info as m  where  m.drugs_numb = (
                        select r.drugs_numb from  his_application_for_drug_return_details as r  where id = d.target_id))
                WHEN
                    d.type=1
                    then (select m.id from  his_medicine_info as m  where  m.drugs_numb = (
                    select d.drugs_numb from  his_medication_details as d  where d.id = d.target_id)
                )
                when
                    d.type=2
                    then
                    (select p.project_id from  his_record_project  as p  where   p.id = d.target_id )

										when
                    d.type=5
                    then
                    (
										select p.project_id from  his_record_project  as p  where   p.id = (
										select p.record_project_id from  his_refund_project  as p  where   p.id = d.target_id ))

                end as id
                ,
            case when
                     d.type=1
                     then
                     (select m.count from his_medication_details as m where m.id  =
                                                                            d.target_id)
                 when
                     d.type=2
                     then
                         (select h.num from  his_record_project as h where h.id = d.target_id)
                 when
                     d.type=3
                     then
                     (select m.hospitalization_day from his_hospital_manage as m where m.id = d.target_id)
                 when
                     d.type=4
                     then
                     (select g.return_count from his_application_for_drug_return_details as g where g.id = d.target_id)

										 when d.type = 5
										 then(
										 select p.refund_num from his_refund_project as p  where  p.id = d.target_id
										 )
                end  as num ,
            case when
                     d.type=1
                     then
                     (select s.sale_price  from his_pharmacy_detail as s where s.id =
                                                                               (select m.medication_id from his_medication_details as m where m.id  =
                                                                                                                                              d.target_id)
                     )
                 when
                     d.type=2
                     then
                     (
                         select h.price from  his_record_project as h where h.id = d.target_id
                     )
                 when
                     d.type=3
                     then
                         (SELECT e.price from  his_bed as e  where e.number = d.name)
                 when
                     d.type =4
                     then
                     (select g.price from his_application_for_drug_return_details as g where g.id = d.target_id)
										 when  d.type =5
										 then(
										 	select p.price from  his_record_project  as p  where   p.id = (
										select p.record_project_id from  his_refund_project  as p  where   p.id = d.target_id )
										 )

                end  as price ,
            d.name,
            d.money
        FROM `his_toll_details` as d
                 LEFT JOIN  `his-userinfo`.user_info as i  on   i.id = d.create_user_id
                 LEFT JOIN
                 his_toll_record as h on h.id = d.toll_record_id
        where  d.toll_record_id  in(
            SELECT h.id
            from his_toll_record as h where h.number in(
						select  o.number from  his_toll_record as o where o.medical_record_id =(
						select  r.medical_record_id from his_toll_record as r where r.number = #{number}
))
        )
    </select>
</mapper>