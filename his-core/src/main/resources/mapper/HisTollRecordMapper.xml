<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ahsj.hiscore.dao.HisTollRecordMapper">
    <resultMap id="BaseResultMap" type="com.ahsj.hiscore.entity.HisTollRecord">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="create_user_id" property="createUserId" jdbcType="BIGINT"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="update_date" property="updateDate" jdbcType="TIMESTAMP"/>
        <result column="update_user_id" property="updateUserId" jdbcType="BIGINT"/>
        <result column="money" property="money" jdbcType="DECIMAL"/>
        <result column="actual_charge" property="actualCharge" jdbcType="DECIMAL"/>
        <result column="recover_the_fee" property="recoverTheFee" jdbcType="DECIMAL"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="attench_id" property="attenchId" jdbcType="BIGINT"/>
        <result column="attench_type" property="attenchType" jdbcType="INTEGER"/>
        <result column="medical_record_id" property="medicalRecordId" jdbcType="VARCHAR"/>
        <result column="is_settlement" property="isSettlement" jdbcType="INTEGER"/>
        <result column="deposit" property="deposit" jdbcType="DECIMAL"/>
        <result column="number" property="number" jdbcType="VARCHAR"/>
        <result column="stock" property="stock"/>
        <result column="exit_count" property="exitCount"/>
        <result column="sale_counts" property="saleCounts"/>
        <result column="createDateFor" property="createDateFor"/>
        <!--添加-->
        <result column="patient_name" property="patientName" jdbcType="VARCHAR"/>
        <result column="nurse_name" property="nurseName" jdbcType="VARCHAR"/>
        <result column="doctor_name" property="doctorName" jdbcType="VARCHAR"/>
        <result column="current_condition" property="currentCondition" jdbcType="VARCHAR"/>
        <result column="past_condition" property="pastCondition" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="details_name" property="detailsName" jdbcType="VARCHAR"/>
        <result column="records" property="records" jdbcType="VARCHAR"/>
        <result column="chief_complaint" property="chiefComplaint"/>
        <result column="phonenumber" property="phonenumber"/>
        <result column="idcard" property="idcard"/>
        <result column="hnumber" property="hnumber"/>
        <result column="minTime" property="minTime"/>
        <result column="maxTime" property="maxTime"/>
        <result column="balance" property="balance" jdbcType="DECIMAL"/>
        <result column="recover_the_fee" property="recoverTheFee"/>
        <result column="cost_price" property="costPrice"/>
        <result column="sale_price" property="salePrice"/>
        <result column="medicine_name" property="medicineName" jdbcType="DECIMAL"/>
        <result column="medicine_date" property="medicineDate"/>
        <result column="enter_count" property="enterCount"/>
        <result column="drugs_spec" property="drugsSpec" jdbcType="VARCHAR"/>
        <result column="drugs_numb" property="drugsNumb" jdbcType="VARCHAR"/>
        <result column="placeOrigin" property="placeOrigin" />


    </resultMap>
    <sql id="Base_Column_List">
    id, create_user_id, create_date, update_date, update_user_id, money, actual_charge,
    recover_the_fee, type, attench_id, attench_type, deposit, number,medical_record_id,is_settlement
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from his_toll_record
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from his_toll_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.ahsj.hiscore.entity.HisTollRecord">
    insert into his_toll_record (id, create_user_id, create_date,
      update_date, update_user_id, money,
      actual_charge, recover_the_fee, type,
      attench_id, attench_type, deposit,
      number,is_settlement,medical_record_id)
    values (#{id,jdbcType=BIGINT}, #{createUserId,jdbcType=BIGINT}, #{createDate,jdbcType=TIMESTAMP},
      #{updateDate,jdbcType=TIMESTAMP}, #{updateUserId,jdbcType=BIGINT}, #{money,jdbcType=DECIMAL},
      #{actualCharge,jdbcType=DECIMAL}, #{recoverTheFee,jdbcType=DECIMAL}, #{type,jdbcType=INTEGER},
      #{attenchId,jdbcType=BIGINT}, #{attenchType,jdbcType=INTEGER}, #{deposit,jdbcType=DECIMAL},
      #{number,jdbcType=VARCHAR},#{isSettlement,jdbcType=INTEGER},#{medicalRecordId,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.ahsj.hiscore.entity.HisTollRecord" useGeneratedKeys="true"
            keyProperty="id">
        insert into his_toll_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="createUserId != null">
                create_user_id,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="updateUserId != null">
                update_user_id,
            </if>
            <if test="money != null">
                money,
            </if>
            <if test="actualCharge != null">
                actual_charge,
            </if>
            <if test="recoverTheFee != null">
                recover_the_fee,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="attenchId != null">
                attench_id,
            </if>
            <if test="attenchType != null">
                attench_type,
            </if>
            <if test="deposit != null">
                deposit,
            </if>
            <if test="number != null">
                number,
            </if>
            <if test="medicalRecordId != null">
                medical_record_id,
            </if>
            <if test="isSettlement != null">
                is_settlement,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="createUserId != null">
                #{createUserId,jdbcType=BIGINT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUserId != null">
                #{updateUserId,jdbcType=BIGINT},
            </if>
            <if test="money != null">
                #{money,jdbcType=DECIMAL},
            </if>
            <if test="actualCharge != null">
                #{actualCharge,jdbcType=DECIMAL},
            </if>
            <if test="recoverTheFee != null">
                #{recoverTheFee,jdbcType=DECIMAL},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="attenchId != null">
                #{attenchId,jdbcType=BIGINT},
            </if>
            <if test="attenchType != null">
                #{attenchType,jdbcType=INTEGER},
            </if>
            <if test="deposit != null">
                #{deposit,jdbcType=DECIMAL},
            </if>
            <if test="number != null">
                #{number,jdbcType=VARCHAR},
            </if>
            <if test="isSettlement != null">
                #{isSettlement,jdbcType=INTEGER},
            </if>
            <if test="medicalRecordId != null">
                #{medicalRecordId,jdbcType=VARCHAR}
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.ahsj.hiscore.entity.HisTollRecord">
        update his_toll_record
        <set>
            <if test="createUserId != null">
                create_user_id = #{createUserId,jdbcType=BIGINT},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUserId != null">
                update_user_id = #{updateUserId,jdbcType=BIGINT},
            </if>
            <if test="money != null">
                money = #{money,jdbcType=DECIMAL},
            </if>
            <if test="actualCharge != null">
                actual_charge = #{actualCharge,jdbcType=DECIMAL},
            </if>
            <if test="recoverTheFee != null">
                recover_the_fee = #{recoverTheFee,jdbcType=DECIMAL},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="attenchId != null">
                attench_id = #{attenchId,jdbcType=BIGINT},
            </if>
            <if test="attenchType != null">
                attench_type = #{attenchType,jdbcType=INTEGER},
            </if>
            <if test="deposit != null">
                deposit = #{deposit,jdbcType=DECIMAL},
            </if>
            <if test="number != null">
                number = #{number,jdbcType=VARCHAR},
            </if>
            <if test="medicalRecordId != null">
                medical_record_id= #{medicalRecordId,jdbcType=VARCHAR}
            </if>
            <if test="isSettlement != null">
                is_settlement= #{isSettlement,jdbcType=INTEGER}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ahsj.hiscore.entity.HisTollRecord">
    update his_toll_record
    set create_user_id = #{createUserId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=BIGINT},
      money = #{money,jdbcType=DECIMAL},
      actual_charge = #{actualCharge,jdbcType=DECIMAL},
      recover_the_fee = #{recoverTheFee,jdbcType=DECIMAL},
      type = #{type,jdbcType=INTEGER},
      attench_id = #{attenchId,jdbcType=BIGINT},
      attench_type = #{attenchType,jdbcType=INTEGER},
      deposit = #{deposit,jdbcType=DECIMAL},
      number = #{number,jdbcType=VARCHAR},
      is_settlement = #{isSettlement,jdbcType=INTEGER},
      medical_record_id= #{medicalRecordId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <!--自定义-->

    <select id="selectByMeicalRecordId" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from his_toll_record
        where medical_record_id = #{medicalRecordId,jdbcType=VARCHAR}
    </select>

    <select id="selectNumCount" parameterType="java.lang.String" resultType="java.lang.Integer">
     select
      count(1)
    from  his_toll_record
    where number LIKE CONCAT(#{number},'%')
  </select>

    <select id="getAllHisCharge" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        SELECT p.id as id, r.medical_record_id as medical_record_id , p.num as count, p.is_payed as is_pay,p.price as
        price, i.`name` as doctor_name , g.department_id as department_id , s.`name` as patient_name ,s.sex as sex,
        p.`name` as record_name, '2' record_type
        FROM his_record_project as p LEFT JOIN `his_medical_record` as r on p.record_id=r.id
        LEFT JOIN his_doctor_info as i on i.id =r.doctor_id
        LEFT JOIN his_patient_info s on s.id = r.patient_id
        LEFT JOIN his_registered AS g on g.id = r.registered_id
        where r.medical_record_id = #{parameter.medicalRecordId,jdbcType=VARCHAR}
        UNION ALL
        SELECT d.id as id, r.medical_record_id as medical_record_id , d.count as count ,d.is_pay as is_pay ,
        y.sale_price as price ,
        i.`name` as doctor_name , g.department_id as department_id , p.`name` as patient_name ,p.sex as sex,
        y.drugs_name as record_name,'1' record_type
        FROM `his_medication_details` as d LEFT JOIN `his_medical_record` as r on d.medical_record_id=r.id
        LEFT JOIN his_toll_record AS tr on r.medical_record_id = tr.medical_record_id
        LEFT JOIN his_doctor_info as i on i.id =r.doctor_id
        LEFT JOIN his_patient_info p on p.id = r.patient_id
        LEFT JOIN his_medicine_info m on m.id =d.medication_id
        LEFT JOIN his_registered AS g on g.id = r.registered_id
        LEFT JOIN his_pharmacy_detail as y on d.medication_id=y.id
        where r.medical_record_id = #{parameter.medicalRecordId,jdbcType=VARCHAR}

        <if test="number != null and number != ''">
            and tr.number =#{parameter.number}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            and tr.create_date #{parameter.createDate}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>
    <select id="selectByDate" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from his_toll_record
        where
        create_date &gt; CURDATE()
        and create_date &lt; CURDATE() +1
        and is_settlement = 2
    </select>
    <select id="selectForDaily">
        select
        a.*
        from
        (
        select
        his_toll_record.*
        from his_toll_record
        where
        and is_settlement = 2
        ) a
        where
        <foreach collection="array" separator="or" index="index" item="item">
            id = #{item,jdbcType=BIGINT}
        </foreach>
    </select>
    <!--    批量更新-->
    <update id="updateBatchForDaily" parameterType="list">
        update his_toll_record
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="is_settlement=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.isSettlement!=null">
                        when id=#{item.id} then #{item.isSettlement}
                    </if>
                </foreach>
            </trim>
        </trim>
        where
        <foreach collection="list" separator="or" item="item" index="index">
            id=#{item.id}
        </foreach>
    </update>
    <!--    住院费用信息查询pojo-->
    <resultMap id="HisTollRecordDetailsMapper" type="com.ahsj.hiscore.entity.HisTollRecordDetails">
        <result column="patient_name" property="patientName" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="INTEGER"/>
        <result column="departmentName" property="departmentName" jdbcType="VARCHAR"/>
        <result column="doctorName" property="doctorName" jdbcType="VARCHAR"/>
        <result column="nurseName" property="nurseName" jdbcType="VARCHAR"/>
        <result column="rest_deposit" property="restDeposit" jdbcType="DECIMAL"/>
        <result column="money" property="money" jdbcType="DECIMAL"/>
    </resultMap>
    <select id="hospitalDetails" parameterType="java.lang.String" resultMap="HisTollRecordDetailsMapper">
        select
               b.id as id,
        b.patient_name as patient_name,
        b.sex as sex,
        f.name as departmentName,
        g.user_name as doctorName,
        h.name as nurseName,
        b.rest_deposit as rest_deposit,
        b.deposit_warning,
        case ISNULL(j.money) when 1 then 0 when 0 then j.money end as money
        from
        his_hospital_manage as b
        left join  his_medical_record  as e on b.medical_number  = e.medical_record_id
        left join `his-userinfo`.organization as f on b.department_id = f.id
        left join  `his-userinfo`.user_info as g on g.id = b.doctor_id
        left join  his_nurse as h on h.id = b.nurse_id
        left join (
        select
        #{medicalRecordId,jdbcType=VARCHAR} as medical_record_id
        ,
        sum(a.money*a.num) as money
        from(
        select
        a.name as name,
        b.id as target_id,
        b.price   as money,
        b.is_payed as isPay,
        b.num as num,
        2 as type
        from
        his_project as a
        left join
        his_record_project as b on b.project_id = a.id
        left join
        his_medical_record as  c on b.record_id = c.id
        where c.medical_record_id =#{medicalRecordId,jdbcType=VARCHAR}
        UNION ALL
        select
        d.drugs_name as name,
        e.id as target_id,
        d.sale_price   as money,
        e.is_pay as isPay,
        e.count as num,
        1 as type
        from
        his_pharmacy_detail as d
        left join
        his_medication_details as e on e. medication_id = d.id
        left join
        his_medical_record as  f on e.medical_record_id = f.id
        where f.medical_record_id =#{medicalRecordId,jdbcType=VARCHAR}
        UNION ALL

        select
        b.name as name,
        a.id as target_id,
        b.money as money ,
        2 as isPay,
        a.hospitalization_day - b.pay_days as num,
        3 as type
        from
        his_hospital_manage as a
        left join
        (select a.id ,SUM(a.num) as pay_days,
        a.money as money,
        a.name
        from
        (
        select
        g.id ,
        h.number as name,
        h.price as money,
        substring_index(substring_index(g.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
        substring_index(substring_index(g.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id
        from
        his_bed as h
        left join his_hospital_manage as g on h.id = g.bed_id
        left join his_medical_record as  f on g.medical_number = f.id
        join
        mysql.help_topic b
        on b.help_topic_id &lt; (length(g.pay_hospitalization_day) - length(replace(g.pay_hospitalization_day,',',''))+1)
        order by g.id
        ) as a
        GROUP BY a.id) as b on a.id = b.id
        where a.medical_number =#{medicalRecordId,jdbcType=VARCHAR}
        UNION ALL
        select
        k.name as name,
        k.target_id as target_id,
        k.money as money ,
        k.isPay as isPay,
        k.num as num,
        k.type as type

        from(
        select
        h.number as name,
        h.price as money,
        substring_index(substring_index(z.pay_hospitalization_day,',',b.help_topic_id+1),',',-1) as num ,
        substring_index(substring_index(z.toll_details_id,',',b.help_topic_id+1),',',-1) as target_id,
        1 as isPay,
        3 as type
        from
        his_bed as h
        left join his_hospital_manage as z on h.id = z.bed_id
        left join his_medical_record as  f on z.medical_number = f.id
        join
        mysql.help_topic b
        on b.help_topic_id &lt; (length(z.pay_hospitalization_day) - length(replace(z.pay_hospitalization_day,',',''))+1)
        order by z.id  ) as k
        ) a
        where a.num != 0
        and a.isPay = 2
        ) as j on j.medical_record_id = #{medicalRecordId,jdbcType=VARCHAR}
        WHERE b.medical_number =#{medicalRecordId,jdbcType=VARCHAR}
    </select>
    <!--查询已经挂号的数量-->
    <select id="selectNumbCount" resultType="int" parameterType="java.lang.String">
    select
      count(*)
    from his_toll_record
    where his_toll_record.number LIKE CONCAT('%',#{number},'%')
  </select>

    <!--门诊费用信息查询-->
    <select id="outpatientDetails" parameterType="java.lang.String" resultMap="HisTollRecordDetailsMapper">
        select
            b.id as id ,
            c.name as patient_name,
            c.sex as sex,
            e.name as departmentName,
            f.user_name as doctorName,
            g.name as nurseName,
            j.money as money
        from
            his_medical_record as b
                left join  his_patient_info  as c on b.patient_id  = c.id
                left join his_registered as d on b.registered_id = d.id
                left join `his-userinfo`.organization as e on d.department_id = e.id
                left join  `his-userinfo`.user_info as f on f.id = b.doctor_id
                left join  his_nurse as g on g.id = b.nurse_id
                left join (
                select
                    #{medicalRecordId,jdbcType=VARCHAR} as medical_record_id ,
                    sum(a.money) as money
                from(
                        select
                            c.medical_record_id ,
                            b.name as name,
                            a.id as target_id,
                            a.price   as price,
                            a.is_payed as isPay,
                            a.num as num ,
                            a.price * a.num as money,
                            2 as type
                        from
                            his_record_project as a
                                left join
                                his_project as b on a.project_id = b.id
                                left join
                                his_medical_record as  c on a.record_id = c.id
                        where  c.medical_record_id = #{medicalRecordId,jdbcType=VARCHAR}
                        UNION ALL
                        select
                            f.medical_record_id,
                            d.drugs_name as name,
                            d.id as target_id,
                            e.sale_price  as price,
                            d.is_pay as isPay,
                            d.count as num,
                            e.sale_price * d.count as money,
                            1 as type
                        from
                            his_medication_details as d
                                left join
                                his_pharmacy_detail as e on d. medication_id = e.id
                                left join
                                his_medical_record as  f on d.medical_record_id = f.id
                        where  f.medical_record_id = #{medicalRecordId,jdbcType=VARCHAR}) a
                where a.isPay = 2
            ) as j on j.medical_record_id = #{medicalRecordId,jdbcType=VARCHAR}
        WHERE b.medical_record_id =#{medicalRecordId,jdbcType=VARCHAR}
    </select>
    <select id="getAllHisTollRecord" resultMap="BaseResultMap" parameterType="core.entity.PageBean">
        select distinct t.id as id,t.number as number ,t.medical_record_id as medical_record_id, t.money as money,
        t.actual_charge AS actual_charge,
        t.create_date as create_date ,t.attench_type as attench_type,t.deposit as deposit,t.recover_the_fee as
        recover_the_fee,i.name as patient_name,a.number as hnumber,t.is_settlement as is_settlement,o.user_name AS
        user_name
        from his_toll_record as t
        LEFT JOIN his_medical_record as m on t.medical_record_id = m.medical_record_id
        LEFT JOIN his_patient_info as i on i.id = m.patient_id
        LEFT JOIN `his-userinfo`.user_info as o on o.id = t.create_user_id
        LEFT JOIN
        ( select z.number as number ,t.medical_record_id as medical_record_id
        from
        his_hospital_manage as z
        right JOIN his_toll_record as t
        on z.medical_number = t.medical_record_id
        where t.attench_type=2) as a on a.medical_record_id = t.medical_record_id
        where
        1=1
        <if test="parameter.lowTime != null">
            and date(t.create_date) &gt;= #{parameter.lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.upTime != null">
            and date(t.create_date) &lt;= #{parameter.upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.months != null and parameter.months != ''">
            and month(t.create_date)=#{parameter.months}
        </if>
        <if test="parameter.years != null and parameter.years != ''">
            and YEAR(t.create_date) = #{parameter.years}
        </if>
        <if test="parameter.number != null and parameter.number != ''">
            and t.number like concat('%' #{parameter.number},'%')
        </if>
        <if test="parameter.attenchType != null and parameter.attenchType != ''">
            and t.attench_type = #{parameter.attenchType}
        </if>
        <if test="parameter.type != null and parameter.type != ''">
            and t.type = #{parameter.type}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>
    <select id="getHisTollRecord" parameterType="java.lang.String" resultMap="BaseResultMap">
       select  t.id ,t.medical_record_id as medical_record_id, t.money as money,t.is_settlement as is_settlement, t.actual_charge AS actual_charge,
t.create_date as create_date ,t.attench_type as attench_type,t.deposit as deposit,t.recover_the_fee as recover_the_fee,
t.number as number,t.type as type ,i.name as patient_name,n.user_name as nurse_name , c.user_name as doctor_name,
m.current_condition as current_condition , m.past_condition as past_condition, o.user_name as user_name,
i.idcard as idcard,
i.phonenumber as phonenumber ,m.chief_complaint as chief_complaint
from his_toll_record as t
LEFT JOIN his_medical_record as m on t.medical_record_id = m.medical_record_id
LEFT JOIN his_patient_info as i on i.id = m.patient_id
LEFT JOIN `his-userinfo`.user_info  as n ON n.id = m.nurse_id
LEFT JOIN `his-userinfo`.user_info as c on c.id =m.doctor_id
LEFT JOIN `his-userinfo`.user_info as o on o.id = t.create_user_id
where  t.number = #{number}
    </select>
    <select id="getPrice" resultMap="BaseResultMap" parameterType="com.ahsj.hiscore.entity.HisTollRecord">
        select
        COALESCE(sum(a.actual_charge-a.recover_the_fee),0)
        as money, min(a.create_date) as minTime ,max(a.create_date) as maxTime
        from (
        select
        distinct h.number , h.actual_charge,h.recover_the_fee, h.create_date
        from his_toll_record h
        where
        1=1
        <if test="lowTime != null ">
            and date(create_date) &gt;= #{lowTime,jdbcType=TIMESTAMP}
        </if>
        <if test="upTime != null">
            and date(create_date) &lt;= #{upTime,jdbcType=TIMESTAMP}
        </if>
        <if test="months != null and months != ''">
            and month(create_date)=#{months}
        </if>
        <if test="years != null and years != ''">
            and YEAR(create_date) = #{years}
        </if>
        <if test="number != null and number != ''">
            and number like concat('%' #{number},'%')
        </if>
        <if test="attenchType != null and attenchType != ''">
            and attench_type = #{attenchType}
        </if>
        <if test="type != null and type != ''">
            and type = #{type}
        </if>
        )as a
    </select>

    <select id="selectByNumber" parameterType="java.lang.String" resultMap="BaseResultMap">
        select his_toll_record.*
from his_toll_record
where number = #{number,jdbcType=VARCHAR}
    </select>
    <select id="selectByTargetId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from his_toll_record where
        medical_record_id =
        (select r.record_number from his_application_for_drug_return as r where r.id = #{drugId}
        )
        and attench_type = 4
    </select>

    <select id="selectTollRecordDataCount" resultMap="BaseResultMap" parameterType="java.util.Date">
	SELECT
    his_toll_record.*
	FROM his_toll_record
	WHERE
        is_settlement = 1
            and create_date &gt;= #{createDate,jdbcType=TIMESTAMP}
            and create_date &lt; #{endDate,jdbcType=TIMESTAMP}
            order by create_date asc
    </select>
    <select id="selectByNumbers" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
r.create_date as create_date , i.user_name as user_name,abs(r.actual_charge- r.recover_the_fee) as money, r.recover_the_fee
        from his_toll_record as r
			LEFT JOIN `his-userinfo`.user_info as i on i.id
= r.create_user_id
			where
        number = #{number}
    </select>

    <select id="ListByNumber" resultMap="BaseResultMap" parameterType="java.lang.String">
select r.* ,i.`name` as patient_name ,i.idcard,e.user_name as name  ,c.balance from  his_toll_record as r
LEFT JOIN his_visit_card as c on c.number = r.medical_record_id
LEFT JOIN his_patient_info as i  on i.id = c.patient_id
LEFT JOIN `his-userinfo`.user_info as e on e.id  = r.create_user_id
 where r.number  = #{number}
    </select>

    <select id="getVisitCard" resultMap="BaseResultMap" parameterType="core.entity.PageBean">
        select r.* ,i.user_name as user_name, o.`name` as patient_name
        from his_toll_record as r
        LEFT JOIN his_visit_card as c on c.number = r.medical_record_id
        LEFT JOIN `his-userinfo`.user_info as i on i.id = r.create_user_id
        LEFT JOIN his_patient_info as o on o.id =c.patient_id
        where 1=1
        <if test="parameter.attenchType == null or parameter.attenchType == ''">
            and r.attench_type in (5,6)
        </if>
        <if test="parameter.lowTime != null">
            and date(r.create_date) &gt;= #{parameter.lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.upTime != null">
            and date(r.create_date) &lt;= #{parameter.upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.months != null and parameter.months != ''">
            and month(r.create_date)=#{parameter.months}
        </if>
        <if test="parameter.years != null and parameter.years != ''">
            and YEAR(r.create_date) = #{parameter.years}
        </if>
        <if test="parameter.number != null and parameter.number != ''">
            and r.number like concat('%' #{parameter.number},'%')
        </if>
        <if test="parameter.attenchType != null and parameter.attenchType != ''">
            and r.attench_type = #{parameter.attenchType}
        </if>
        <if test="parameter.type != null and parameter.type != ''">
            and r.type = #{parameter.type}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>

    <select id="getPriceVisitCard" resultMap="BaseResultMap" parameterType="com.ahsj.hiscore.entity.HisTollRecord">
        select
        COALESCE(sum(a.actual_charge-a.recover_the_fee),0)
        as money, min(a.create_date) as minTime ,max(a.create_date) as maxTime
        from (
        select
        distinct h.number , h.actual_charge,h.recover_the_fee, h.create_date
        from his_toll_record h
        where
        1=1
        <if test="attenchType == null or attenchType == ''">
            and attench_type in (5,6)
        </if>
        <if test="lowTime != null ">
            and date(create_date) &gt;= #{lowTime,jdbcType=TIMESTAMP}
        </if>
        <if test="upTime != null">
            and date(create_date) &lt;= #{upTime,jdbcType=TIMESTAMP}
        </if>
        <if test="months != null and months != ''">
            and month(create_date)=#{months}
        </if>
        <if test="years != null and years != ''">
            and YEAR(create_date) = #{years}
        </if>
        <if test="number != null and number != ''">
            and number like concat('%' #{number},'%')
        </if>
        <if test="attenchType != null and attenchType != ''">
            and attench_type = #{attenchType}
        </if>
        <if test="type != null and type != ''">
            and type = #{type}
        </if>
        )as a
    </select>

    <select id="selectVisitCard" resultMap="BaseResultMap" parameterType="java.lang.String">
  select  t.* ,i.`name` as patient_name,i.idcard ,i.phonenumber ,o.user_name
from  his_toll_record as t
	LEFT JOIN his_visit_card as c on c.number = t.medical_record_id
	LEFT JOIN his_patient_info as i on i.id = c.patient_id
	LEFT JOIN `his-userinfo`.user_info as o on o.id = t.create_user_id
     where  t.number = #{number}
    </select>

    <select id="getAllDrug" resultMap="BaseResultMap" parameterType="core.entity.PageBean">
        select distinct (r.number), o.user_name AS
        user_name ,r.medical_record_id, i.name as patient_name,r.is_settlement
        ,d.create_date,r.attench_type,d.type,s.create_date as medicine_date,u.user_name as medicine_name,k.momey as
        sale_price,l.cost_price,r.recover_the_fee
        from his_toll_details as d
        LEFT JOIN his_toll_record as r on r.id = d.toll_record_id
        LEFT JOIN `his-userinfo`.user_info as o on o.id = d.create_user_id
        LEFT JOIN his_medical_record as m on r.medical_record_id = m.medical_record_id
        LEFT JOIN his_patient_info as i on i.id = m.patient_id
        LEFT JOIN his_medi_exit_details as s on s.toll_number = r.number
        LEFT JOIN `his-userinfo`.user_info as u on u.id = s.create_user_id
        LEFT JOIN (
        select sum(
        d.money) as momey ,r.number from
        his_toll_details as d
        LEFT JOIN his_toll_record as r on r.id = d.toll_record_id
        where d.type in (1,4)
        GROUP BY r.number) as k on k.number = r.number
        LEFT JOIN(
        select sum(h.price*i.count)as cost_price ,r.number from his_medi_exit_details as e
        LEFT JOIN his_toll_record as r on r.number = e.toll_number
        LEFT JOIN his_medi_enter_details as h on h.id = e.medi_enter_id
        LEFT JOIN his_related_medicationandexit as i on i.exit_id = e.id
        GROUP BY r.number
        ) as l on l.number = r.number
        where d.type in (1,4)
        <if test="parameter.lowTime != null">
            and date(r.create_date) &gt;= #{parameter.lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.upTime != null">
            and date(r.create_date) &lt;= #{parameter.upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.months != null and parameter.months != ''">
            and month(r.create_date)=#{parameter.months}
        </if>
        <if test="parameter.years != null and parameter.years != ''">
            and YEAR(r.create_date) = #{parameter.years}
        </if>
        <if test="parameter.number != null and parameter.number != ''">
            and r.number like concat('%' #{parameter.number},'%')
        </if>
        <if test="parameter.attenchType != null and parameter.attenchType != ''">
            and r.attench_type = #{parameter.attenchType}
        </if>
        <if test="parameter.type != null and parameter.type != ''">
            and r.type = #{parameter.type}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>


    <select id="selectByMedicalNumberForCommonDetails" parameterType="java.lang.String"
            resultMap="HisTollRecordDetailsMapper">
        select b.name as patient_name,b.sex as sex,e.`name` as departmentName,d.user_name as doctorName,f.rest_deposit as rest_deposit,a.id as id
        from his_medical_record as a
                 left join his_patient_info as b on a.patient_id = b.id
                 left join his_registered as c on c.id = a.registered_id
                 left join `his-userinfo`.user_info as d on a.doctor_id = d.id
                 left join `his-userinfo`.organization as e on c.department_id = e.id
                 left join his_hospital_manage as f on a.medical_record_id = f.medical_number
        where a.medical_record_id = #{medicalNumber,jdbcType=VARCHAR}
    </select>

    <select id="getDrugPrice" resultMap="BaseResultMap" parameterType="com.ahsj.hiscore.entity.HisTollRecord">
        select sum(
        CASE d.type
        WHEN 1 THEN
        d.sale_price
        WHEN 4 THEN
        -d.sale_price
        END
        ) as sale_price , min(d.create_date) as minTime ,max(d.create_date) as maxTime,sum(d.cost_price) as cost_price
        from(
        select distinct (r.number), o.user_name AS
        user_name ,r.medical_record_id, i.name as patient_name,r.is_settlement
        ,d.create_date,r.attench_type,d.type,s.create_date as medicine_date,u.user_name as medicine_name,k.momey as
        sale_price,l.cost_price
        from his_toll_details as d
        LEFT JOIN his_toll_record as r on r.id = d.toll_record_id
        LEFT JOIN `his-userinfo`.user_info as o on o.id = d.create_user_id
        LEFT JOIN his_medical_record as m on r.medical_record_id = m.medical_record_id
        LEFT JOIN his_patient_info as i on i.id = m.patient_id
        LEFT JOIN his_medi_exit_details as s on s.toll_number = r.number
        LEFT JOIN `his-userinfo`.user_info as u on u.id = s.create_user_id
        LEFT JOIN (
        select sum(
        d.money) as momey ,r.number from
        his_toll_details as d
        LEFT JOIN his_toll_record as r on r.id = d.toll_record_id
        where d.type in (1,4)
        GROUP BY r.number) as k on k.number = r.number
        LEFT JOIN(
        select sum(h.price*i.count)as cost_price ,r.number from his_medi_exit_details as e
        LEFT JOIN his_toll_record as r on r.number = e.toll_number
        LEFT JOIN his_medi_enter_details as h on h.id = e.medi_enter_id
        LEFT JOIN his_related_medicationandexit as i on i.exit_id = e.id
        GROUP BY r.number
        ) as l on l.number = r.number
        where d.type in (1,4)
        <if test="lowTime != null">
            and date(r.create_date) &gt;= #{lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="upTime != null">
            and date(r.create_date) &lt;= #{upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="months != null and months != ''">
            and month(r.create_date)=#{months}
        </if>
        <if test="years != null and years != ''">
            and YEAR(r.create_date) = #{years}
        </if>
        <if test="number != null and number != ''">
            and r.number like concat('%' #{number},'%')
        </if>
        <if test="attenchType != null and attenchType != ''">
            and r.attench_type = #{attenchType}
        </if>
        <if test="type != null and type != ''">
            and r.type = #{type}
        </if>
        ) as d
    </select>

    <select id="getAllProject" resultMap="BaseResultMap" parameterType="core.entity.PageBean">
        select d.name,o.user_name AS
        user_name ,r.medical_record_id, i.name as patient_name,d.money,r.is_settlement
        ,d.create_date,r.attench_type,d.type,r.number
        from his_toll_details as d
        LEFT JOIN his_toll_record as r on r.id = d.toll_record_id
        LEFT JOIN `his-userinfo`.user_info as o on o.id = d.create_user_id
        LEFT JOIN his_medical_record as m on r.medical_record_id = m.medical_record_id
        LEFT JOIN his_patient_info as i on i.id = m.patient_id
        where d.type in (2,5)
        <if test="parameter.lowTime != null">
            and date(r.create_date) &gt;= #{parameter.lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.upTime != null">
            and date(r.create_date) &lt;= #{parameter.upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.months != null and parameter.months != ''">
            and month(r.create_date)=#{parameter.months}
        </if>
        <if test="parameter.years != null and parameter.years != ''">
            and YEAR(r.create_date) = #{parameter.years}
        </if>
        <if test="parameter.number != null and parameter.number != ''">
            and r.number like concat('%' #{parameter.number},'%')
        </if>
        <if test="parameter.attenchType != null and parameter.attenchType != ''">
            and r.attench_type = #{parameter.attenchType}
        </if>
        <if test="parameter.type != null and parameter.type != ''">
            and r.type = #{parameter.type}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>

    <select id="getProjectPrice" resultMap="BaseResultMap" parameterType="com.ahsj.hiscore.entity.HisTollRecord">
        select sum(
        CASE d.type
        WHEN 1 THEN
        d.money
        WHEN 4 THEN
        -d.money
        END
        ) as money , min(d.create_date) as minTime ,max(d.create_date) as maxTime
        from his_toll_details as d LEFT JOIN his_toll_record as r on
        r.id = d.toll_record_id LEFT JOIN `his-userinfo`.user_info as o on o.id = d.create_user_id
        LEFT JOIN his_medical_record as m on r.medical_record_id = m.medical_record_id LEFT JOIN his_patient_info
        as i on i.id = m.patient_id where d.type
        in (2,5)
        <if test="lowTime != null">
            and date(r.create_date) &gt;= #{lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="upTime != null">
            and date(r.create_date) &lt;= #{upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="months != null and months != ''">
            and month(r.create_date)=#{months}
        </if>
        <if test="years != null and years != ''">
            and YEAR(r.create_date) = #{years}
        </if>
        <if test="number != null and number != ''">
            and r.number like concat('%' #{number},'%')
        </if>
        <if test="attenchType != null and attenchType != ''">
            and r.attench_type = #{attenchType}
        </if>
        <if test="type != null and type != ''">
            and r.type = #{type}
        </if>
    </select>

    <select id="pharmacyInventory" resultMap="BaseResultMap" parameterType="core.entity.PageBean"  >
        select d.drugs_name as details_name, m.create_date
        ,m.enter_count,e.exit_count,r.number,d.stock,d.drugs_spec,d.drugs_numb,i.placeOrigin
        from his_pharmacy_detail as d
        LEFT JOIN his_medicine_info as i on i.drugs_numb = d.drugs_numb
        LEFT JOIN
        (		select a.create_date,a.drugs_numb,a.enter_count from  (select s.create_date as create_date,s.drugs_numb,s.enter_count from his_medi_enter_details as s,

        (select max(create_date) as create_date from his_medi_enter_details   GROUP BY pharmacy_id

        ) as b
        where s.create_date = b.create_date

        GROUP BY
        s.pharmacy_id, create_date desc )as a 	  GROUP BY a.drugs_numb
        )as m
        on m.drugs_numb = d.drugs_numb
        LEFT JOIN
        (select sum(s.exit_count) as exit_count, s.drugs_numb from his_medi_exit_details as s
        where 1=1
        <if test="parameter.lowTime != null">
            and date(s.create_date) &gt;= #{parameter.lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.upTime != null">
            and date(s.create_date) &lt;= #{parameter.upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.months != null and parameter.months != ''">
            and month(s.create_date)=#{parameter.months}
        </if>
        <if test="parameter.years != null and parameter.years != ''">
            and YEAR(s.create_date) = #{parameter.years}
        </if>
        GROUP BY s.pharmacy_id ) as e
        on e.drugs_numb = d.drugs_numb
        LEFT JOIN
        (select sum(r.number) as number ,r.drugs_numb from his_drug_loss_reporting as r GROUP BY r.pharmacy_id ) as r on
        r.drugs_numb = d.drugs_numb
        where 1=1
        <if test="parameter.detailsName != null and parameter.detailsName != ''">
            and d.drugs_name like concat('%' #{parameter.detailsName},'%')
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>
    <select id="getPharmacyinventoryPrice" resultMap="BaseResultMap"
            parameterType="com.ahsj.hiscore.entity.HisTollRecord">
        select coalesce(sum(a.price*m.exit_count),0) as cost_price,coalesce(sum(r.price*m.exit_count),0) as sale_price,
        min(m.create_date)
        as minTime ,max(m.create_date) as maxTime from his_medi_exit_details as m LEFT JOIN his_pharmacy_detail
        as d on d.drugs_name = m.drugs_name LEFT JOIN `his-userinfo`.user_info as i on i.id = m.create_user_id
        left JOIN his_related_medicationandexit as r on r.exit_id = m.id LEFT JOIN his_medi_enter_details
        as a on a.id = m.medi_enter_id where 1=1
        <if test="lowTime != null">
            and date(m.create_date) &gt;= #{lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="upTime != null">
            and date(m.create_date) &lt;= #{upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="months != null and months != ''">
            and month(m.create_date)=#{months}
        </if>
        <if test="years != null and years != ''">
            and YEAR(m.create_date) = #{years}
        </if>
        <if test="detailsName != null and detailsName != ''">
            and d.drugs_name like concat('%' #{detailsName},'%')
        </if>
        <if test="userName != null and userName != ''">
            and i.user_name like concat('%' #{userName},'%')
        </if>
    </select>
    <select id="pharmacyInventoryDetail" resultMap="BaseResultMap" parameterType="core.entity.PageBean">
        select d.id ,d.stock ,m.exit_count,d.drugs_name as details_name,d.sale_counts,(a.price*m.exit_count) as
        cost_price, (r.price*m.exit_count) as sale_price
        ,i.user_name as user_name,m.create_date
        from his_medi_exit_details as m
        LEFT JOIN his_pharmacy_detail as d on d.drugs_numb = m.drugs_numb
        LEFT JOIN `his-userinfo`.user_info as i on i.id = m.create_user_id
        left JOIN his_related_medicationandexit as r on r.exit_id = m.id
        LEFT JOIN his_medi_enter_details as a on a.id = m.medi_enter_id
        where 1=1
        <if test="parameter.drugsNumb != null and parameter.drugsNumb != ''">
         and    m.drugs_numb = #{parameter.drugsNumb}
        </if>
        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>

</mapper>

