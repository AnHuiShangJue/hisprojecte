<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ahsj.hiscore.dao.HisRegisteredpayMapper">
    <resultMap id="BaseResultMap" type="com.ahsj.hiscore.entity.HisRegisteredpay">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="registered_id" property="registeredId" jdbcType="BIGINT"/>
        <result column="amount_receivable" property="amountReceivable" jdbcType="DECIMAL"/>
        <result column="paid_amount" property="paidAmount" jdbcType="DECIMAL"/>
        <result column="retrieve_amount" property="retrieveAmount" jdbcType="DECIMAL"/>
        <result column="pay_type" property="payType" jdbcType="INTEGER"/>
        <result column="create_user_id" property="createUserId" jdbcType="BIGINT"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="update_user_id" property="updateUserId" jdbcType="BIGINT"/>
        <result column="update_date" property="updateDate" jdbcType="TIMESTAMP"/>
        <result column="number" property="number" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="patient_name" property="patientName" jdbcType="VARCHAR"/>
        <result column="registered_category" property="registeredCategory" jdbcType="INTEGER"/>
        <result column="medical_record_card_id" property="medicalRecordCardId" jdbcType="BIGINT"/>
        <result column="create_name" property="createName" jdbcType="VARCHAR"/>
        <result column="idcard" property="idcard"/>
        <result column="phonenumber" property="phonenumber"/>
        <result column="location" property="location"/>
        <result column="minTime" property="minTime"/>
        <result column="maxTime" property="maxTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, registered_id, amount_receivable, paid_amount, retrieve_amount,create_user_id, create_date,
    update_user_id, update_date,pay_type
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from his_registeredpay
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from his_registeredpay
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.ahsj.hiscore.entity.HisRegisteredpay">
    insert into his_registeredpay (id, registered_id, amount_receivable, 
      paid_amount, retrieve_amount,create_user_id, create_date,
    update_user_id, update_date,pay_type)
    values (#{id,jdbcType=BIGINT}, #{registeredId,jdbcType=BIGINT}, #{amountReceivable,jdbcType=DECIMAL},
      #{paidAmount,jdbcType=DECIMAL}, #{retrieveAmount,jdbcType=DECIMAL}, #{createUserId,jdbcType=BIGINT}, #{createDate,jdbcType=TIMESTAMP},
      #{updateUserId,jdbcType=BIGINT}, #{updateDate,jdbcType=TIMESTAMP},#{payType,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.ahsj.hiscore.entity.HisRegisteredpay">
        insert into his_registeredpay
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="registeredId != null">
                registered_id,
            </if>
            <if test="amountReceivable != null">
                amount_receivable,
            </if>
            <if test="paidAmount != null">
                paid_amount,
            </if>
            <if test="retrieveAmount != null">
                retrieve_amount,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="registeredId != null">
                #{registeredId,jdbcType=VARCHAR},
            </if>
            <if test="amountReceivable != null">
                #{amountReceivable,jdbcType=DECIMAL},
            </if>
            <if test="paidAmount != null">
                #{paidAmount,jdbcType=DECIMAL},
            </if>
            <if test="retrieveAmount != null">
                #{retrieveAmount,jdbcType=DECIMAL},
            </if>
            <if test="createUserId != null">
                create_user_id,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateUserId != null">
                update_user_id,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="payType != null">
                pay_type,
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.ahsj.hiscore.entity.HisRegisteredpay">
        update his_registeredpay
        <set>
            <if test="registeredId != null">
                registered_id = #{registeredId,jdbcType=BIGINT},
            </if>
            <if test="amountReceivable != null">
                amount_receivable = #{amountReceivable,jdbcType=DECIMAL},
            </if>
            <if test="paidAmount != null">
                paid_amount = #{paidAmount,jdbcType=DECIMAL},
            </if>
            <if test="retrieveAmount != null">
                retrieve_amount = #{retrieveAmount,jdbcType=DECIMAL},
            </if>
            <if test="createUserId != null">
                #{createUserId,jdbcType=BIGINT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUserId != null">
                #{updateUserId,jdbcType=BIGINT},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="payType != null">
                #{payType,jdbcType=INTEGER}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ahsj.hiscore.entity.HisRegisteredpay">
    update his_registeredpay
    set registered_id = #{registeredId,jdbcType=BIGINT},
      amount_receivable = #{amountReceivable,jdbcType=DECIMAL},
      paid_amount = #{paidAmount,jdbcType=DECIMAL},
      retrieve_amount = #{retrieveAmount,jdbcType=DECIMAL},
       create_user_id = #{createUserId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=BIGINT},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      pay_type =  #{payType,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <!--自定义sql-->
    <select id="selectByRegisteredId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from his_registeredpay
        where registered_id = #{registeredId,jdbcType=BIGINT}
    </select>
    <select id="getAllHisRegisteredpay" parameterType="core.entity.PageBean" resultMap="BaseResultMap">
        select p.id, p.registered_id, p.amount_receivable, p.paid_amount, p.retrieve_amount,p.create_user_id,
        p.create_date,
        p.update_user_id, p.update_date,p.pay_type,
        i.name as patient_name ,d.number as number ,d.remark as remark,d.registered_category as registered_category,
        d.medical_record_card_id as medical_record_card_id,u.user_name as create_name
        from his_registeredpay as p
        LEFT JOIN his_registered as d on p.registered_id = d.id
        LEFT JOIN his_patient_info as i on i.id = d.patient_id
        LEFT JOIN `his-userinfo`.user_info as u on p.create_user_id=u.id
        where
        1=1
        <if test="parameter.number != null and parameter.number != ''">
            and d.number like concat('%' #{parameter.number},'%')
        </if>
        <if test="parameter.createName != null and parameter.createName != ''">
            and u.user_name like concat('%' #{parameter.createName},'%')
        </if>
        <if test="parameter.lowTime != null">
            and date(p.create_date) &gt;= #{parameter.lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.upTime != null">
            and date(p.create_date) &lt;= #{parameter.upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="parameter.months != null">
            and month(p.create_date)=#{parameter.months}
        </if>
        <if test="parameter.years != null">
            and YEAR(p.create_date) = #{parameter.years}
        </if>

        <if test="parameter.orders != null and parameter.orders != ''">
            order by ${parameter.orders}
        </if>
    </select>
    <select id="getHisRegisteredpay" resultMap="BaseResultMap" parameterType="java.lang.String">
    select  p.id, p.registered_id, p.amount_receivable, p.paid_amount, p.retrieve_amount,p.create_user_id, p.create_date,
  p.update_user_id, p.update_date,p.pay_type,
   i.name as patient_name ,d.number as number ,d.remark as remark,d.registered_category as registered_category,
  d.medical_record_card_id as medical_record_card_id,u.user_name as  create_name,i.idcard as idcard,i.phonenumber as phonenumber,i.location as location
  from  his_registeredpay as p
  LEFT JOIN  his_registered as d on  p.registered_id = d.id
  LEFT JOIN his_patient_info as i on i.id = d.patient_id
LEFT JOIN  `his-userinfo`.user_info as u on  p.create_user_id=u.id
where d.number=#{number}
</select>
    <select id="selectByDate" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from his_registeredpay
        where
        create_date &gt; CURDATE()
        and create_date &lt; CURDATE() +1
    </select>
    <select id="getPrice" parameterType="com.ahsj.hiscore.entity.HisRegisteredpay" resultMap="BaseResultMap">
        select distinct COALESCE(sum(a.paid_amount-a.retrieve_amount),0) as amount_receivable ,
        min(a.create_date) as minTime ,max(a.create_date) as maxTime
        from (
        select d.number ,p.create_date,p.paid_amount as paid_amount, p.retrieve_amount as retrieve_amount,u.user_name
        from his_registeredpay as p
        LEFT JOIN his_registered as d on p.registered_id = d.id
        LEFT JOIN `his-userinfo`.user_info as u on p.create_user_id=u.id
        where
        1=1
        <if test="number != null and number != ''">
            and d.number like concat('%' #{number},'%')
        </if>
        <if test="createName != null and createName != ''">
            and u.user_name like concat('%' #{createName},'%')
        </if>
        <if test="lowTime != null">
            and date(p.create_date) &gt;= #{lowTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="upTime != null">
            and date(p.create_date) &lt;= #{upTime ,jdbcType=TIMESTAMP}
        </if>
        <if test="months != null and months != ''">
            and month(p.create_date)=#{months}
        </if>
        <if test="years != null and years != ''">
            and YEAR(p.create_date) = #{years}
        </if>
        ) as a

    </select>
</mapper>